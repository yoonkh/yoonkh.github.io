---
layout: post
title:  "RESTful 파이썬 웹 제작"
date:   2017-12-31
author: Yoonkh
categories: Python
tags: 
- Python
- Django
- Code
comments: True
---

# RESTful 파이썬 웹 서비스 제작

## 장고를 이용한 레스트풀 API의 개발

### 간단한 SQLite 데이터 베이스와 대화하는 레스트풀 API 디자인

우리는 가장 적절한 **객체 관계형 매핑**을 선택하고 구성하는 데 시간을 낭비하고 싶지 않다. 가능한 한 빨리 레스트풀 API를 완성하고 모바일 앱을 통해 대화를 시작하길 원한다. 우리는 게임을 데이터베이스로 운영하길원하는데, 제작 준비가 필요하지 않으므로 복잡한 설치 또는 구성에 시간을 낭비하지 않고 가능하면 가장 단순한 관계형 데이터베이스를 사용할 수 있다. 

DRF라는 장고 레스트 프레임워크를 사용하면, 이 작업을 쉽게 완료해서 레스트풀 웹 서비스의 첫 번째 버전에 대한 HTTP 요청을 시작할 수 있다. 여기서는 새로운 장고 레스트 프레임 워크 프로젝트의 기본 데이터베이스인 매우 간단한 SQLite 데이터베이스로 작업할것이다. 

주요 자원에 대한 요구사항을 지정해야 한다. 다음 속성 또는 필드가 필요하다. 

- 정수 식별자
- 이름 또는 타이틀
- 출시일
- 3D RPG 또는 2D 모바일 아케이드와 같은 게임 카테고리 디스크립션
- 플레이어가 적어도 한 번 게임을 했는지 여부를 나타내는 bool 값

다음의 표는 첫 번째 API 버전에서 지원해야 하는 HTTP 동사, 범위, 그 메서드에 대한 의미를 보여준다. 

| **HTTP동사**  | **범위**  | **의미**  |
|---|---|---|
| GET  | 게임 컬렉션  | 컬렉션의 모든 저장도니 게임을 얻고, 이름에 따라 오름차순으로 정렬한다.  |
| GET  | 게임  | 게임 하나만 얻는다.  |
| POST  | 게임 컬렉션  | 컬렉션에 새 게임 생성  |
| PUT  | 게임  | 기존 게임 업데이트  |
| DELETE  | 게임  | 기존 게임 삭제  |

### 각 HTTP 메서드가 수행하는 작업 이해

새 게임을 만들려면 HTTP 동사(POST)와 요청 **URL**로 HTTP 요청을 작성해 보내야한다. 더욱이 **JSON** 키-값 쌍으로 필드 이름과 값을 제공해 새 게임을 만들어야 한다. 요청 결과, 서버는 필드에 제공된 값의 유효성을 검사하고 유효한 게임인지 확인한 후 데이터베이스에 저장한다.

서버는 적절한 테이블에 새 게임이 들어간 새 행을 삽입하고, JSON으로 직렬화된 최근 추가 게임의 JSON 본문과 201 Created 상태 코드를 반환하는데, 여기에는 데이터베이스가 자동으로 생성하고 게임 객체에 지정한 할당 id 또는 기본 키가 포함된다. 

```
POST http://localhost:8000/games/
```

id 또는 기본 키가 지정된 숫자 값과 일치하는 게임을 얻으려면 HTTP 동사(GET)와 요청 **URL**을 사용해서 HTTP 요청을 작성해 보내야 하는데, 여기서 {id}에는 id나 기본 키에 해당하는 숫자 값을 저장한다. 

```
GET http://localhost:8000/games/{id}/
```

id 또는 기본 키가 지정된 숫자 값과 일치하는 게임을 업데이트하려면 HTTP 동사(PUT)와 요청 **URL**을 사용해 HTTP 요청을 작성해 보내야 하는데, 여기서 {id} 자리에는 제공된 데이터로 생성된 게임의 해당 값으로 대체한다. 

```
PUT http://localhost:8000/games/{id}/
```

id 또는 기본 키가 지정된 숫자 값과 일치하는 게임을 제거하려면 HTTP 동사(DELETE)와 요청 **URL**을 사용해서 HTTP 요청을 작성해 보내야 하는데, 여기서 {id} 자리에 해당 숫자를 적는다. 

```
DELETE http://localhost:8000/games/{id}/
```
